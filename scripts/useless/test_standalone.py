import itertools


def test(seq, alpha, length, repeat):
    failed = False
    for perm in {*itertools.permutations(alpha * (repeat or length), length)}:
        if "".join(perm) not in seq:
            print(f"failed! {''.join(perm)}\n\nsequence:\n{seq}")
            failed = True
            break
    if not failed:
        print(f"sequence is good! [a: {alpha}, l: {length}, r: {repeat}]")


params = ("abcd", 6, 6)

test(
    "aaaaaabaaaaacaaaaadaaaabbaaaabcaaaabdaaaacbaaaaccaaaacdaaaadbaaaadcaaaaddaaababaaabacaaabadaaabbbaaabbcaaabbdaaabcbaaabccaaabcdaaabdbaaabdcaaabddaaacabaaacacaaacadaaacbbaaacbcaaacbdaaaccbaaacccaaaccdaaacdbaaacdcaaacddaaadabaaadacaaadadaaadbbaaadbcaaadbdaaadcbaaadccaaadcdaaaddbaaaddcaaadddaabaabaabaacaabaadaababbaababcaababdaabacbaabaccaabacdaabadbaabadcaabaddaabbabaabbacaabbadaabbbbaabbbcaabbbdaabbcbaabbccaabbcdaabbdbaabbdcaabbddaabcabaabcacaabcadaabcbbaabcbcaabcbdaabccbaabcccaabccdaabcdbaabcdcaabcddaabdabaabdacaabdadaabdbbaabdbcaabdbdaabdcbaabdccaabdcdaabddbaabddcaabdddaacaacaacaadaacabbaacabcaacabdaacacbaacaccaacacdaacadbaacadcaacaddaacbabaacbacaacbadaacbbbaacbbcaacbbdaacbcbaacbccaacbcdaacbdbaacbdcaacbddaaccabaaccacaaccadaaccbbaaccbcaaccbdaacccbaaccccaacccdaaccdbaaccdcaaccddaacdabaacdacaacdadaacdbbaacdbcaacdbdaacdcbaacdccaacdcdaacddbaacddcaacdddaadaadaadabbaadabcaadabdaadacbaadaccaadacdaadadbaadadcaadaddaadbabaadbacaadbadaadbbbaadbbcaadbbdaadbcbaadbccaadbcdaadbdbaadbdcaadbddaadcabaadcacaadcadaadcbbaadcbcaadcbdaadccbaadcccaadccdaadcdbaadcdcaadcddaaddabaaddacaaddadaaddbbaaddbcaaddbdaaddcbaaddccaaddcdaadddbaadddcaaddddabababacababadababbbababbcababbdababcbababccababcdababdbababdcababddabacacabacadabacbbabacbcabacbdabaccbabacccabaccdabacdbabacdcabacddabadacabadadabadbbabadbcabadbdabadcbabadccabadcdabaddbabaddcabadddabbabbabbabcabbabdabbacbabbaccabbacdabbadbabbadcabbaddabbbacabbbadabbbbbabbbbcabbbbdabbbcbabbbccabbbcdabbbdbabbbdcabbbddabbcacabbcadabbcbbabbcbcabbcbdabbccbabbcccabbccdabbcdbabbcdcabbcddabbdacabbdadabbdbbabbdbcabbdbdabbdcbabbdccabbdcdabbddbabbddcabbdddabcabcabcabdabcacbabcaccabcacdabcadbabcadcabcaddabcbacabcbadabcbbbabcbbcabcbbdabcbcbabcbccabcbcdabcbdbabcbdcabcbddabccacabccadabccbbabccbcabccbdabcccbabccccabcccdabccdbabccdcabccddabcdacabcdadabcdbbabcdbcabcdbdabcdcbabcdccabcdcdabcddbabcddcabcdddabdabdabdacbabdaccabdacdabdadbabdadcabdaddabdbacabdbadabdbbbabdbbcabdbbdabdbcbabdbccabdbcdabdbdbabdbdcabdbddabdcacabdcadabdcbbabdcbcabdcbdabdccbabdcccabdccdabdcdbabdcdcabdcddabddacabddadabddbbabddbcabddbdabddcbabddccabddcdabdddbabdddcabddddacacacadacacbbacacbcacacbdacaccbacacccacaccdacacdbacacdcacacddacadadacadbbacadbcacadbdacadcbacadccacadcdacaddbacaddcacadddacbacbacbaccacbacdacbadbacbadcacbaddacbbadacbbbbacbbbcacbbbdacbbcbacbbccacbbcdacbbdbacbbdcacbbddacbcadacbcbbacbcbcacbcbdacbccbacbcccacbccdacbcdbacbcdcacbcddacbdadacbdbbacbdbcacbdbdacbdcbacbdccacbdcdacbddbacbddcacbdddaccaccaccacdaccadbaccadcaccaddaccbadaccbbbaccbbcaccbbdaccbcbaccbccaccbcdaccbdbaccbdcaccbddacccadacccbbacccbcacccbdaccccbacccccaccccdacccdbacccdcacccddaccdadaccdbbaccdbcaccdbdaccdcbaccdccaccdcdaccddbaccddcaccdddacdacdacdadbacdadcacdaddacdbadacdbbbacdbbcacdbbdacdbcbacdbccacdbcdacdbdbacdbdcacdbddacdcadacdcbbacdcbcacdcbdacdccbacdcccacdccdacdcdbacdcdcacdcddacddadacddbbacddbcacddbdacddcbacddccacddcdacdddbacdddcacddddadadadbbadadbcadadbdadadcbadadccadadcdadaddbadaddcadadddadbadbadbadcadbaddadbbbbadbbbcadbbbdadbbcbadbbccadbbcdadbbdbadbbdcadbbddadbcbbadbcbcadbcbdadbccbadbcccadbccdadbcdbadbcdcadbcddadbdbbadbdbcadbdbdadbdcbadbdccadbdcdadbddbadbddcadbdddadcadcadcaddadcbbbadcbbcadcbbdadcbcbadcbccadcbcdadcbdbadcbdcadcbddadccbbadccbcadccbdadcccbadccccadcccdadccdbadccdcadccddadcdbbadcdbcadcdbdadcdcbadcdccadcdcdadcddbadcddcadcdddaddaddaddbbbaddbbcaddbbdaddbcbaddbccaddbcdaddbdbaddbdcaddbddaddcbbaddcbcaddcbdaddccbaddcccaddccdaddcdbaddcdcaddcddadddbbadddbcadddbdadddcbadddccadddcdaddddbaddddcadddddbbbbbbcbbbbbdbbbbccbbbbcdbbbbdcbbbbddbbbcbcbbbcbdbbbcccbbbccdbbbcdcbbbcddbbbdbcbbbdbdbbbdccbbbdcdbbbddcbbbdddbbcbbcbbcbbdbbcbccbbcbcdbbcbdcbbcbddbbccbcbbccbdbbccccbbcccdbbccdcbbccddbbcdbcbbcdbdbbcdccbbcdcdbbcddcbbcdddbbdbbdbbdbccbbdbcdbbdbdcbbdbddbbdcbcbbdcbdbbdcccbbdccdbbdcdcbbdcddbbddbcbbddbdbbddccbbddcdbbdddcbbddddbcbcbcbdbcbcccbcbccdbcbcdcbcbcddbcbdbdbcbdccbcbdcdbcbddcbcbdddbccbccbccbcdbccbdcbccbddbcccbdbcccccbccccdbcccdcbcccddbccdbdbccdccbccdcdbccddcbccdddbcdbcdbcdbdcbcdbddbcdcbdbcdcccbcdccdbcdcdcbcdcddbcddbdbcddccbcddcdbcdddcbcddddbdbdbdccbdbdcdbdbddcbdbdddbdcbdcbdcbddbdccccbdcccdbdccdcbdccddbdcdccbdcdcdbdcddcbdcdddbddbddbddcccbddccdbddcdcbddcddbdddccbdddcdbddddcbdddddccccccdcccccddcccdcdcccdddccdccdccdcddccddcdccddddcdcdcdddcddcddcddddddaaaaadccccd",
    *params,
)

# re.sub(f"(.)\\1{{{length},}}", "\\1" * length, "generated")
